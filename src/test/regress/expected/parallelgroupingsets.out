--
-- grouping sets
--
-- test data sources
create table gstest(c1 int, c2 int, c3 int);
insert into gstest select 1,10,100 from generate_series(1,1000000)i;
insert into gstest select 1,10,200 from generate_series(1,1000000)i;
insert into gstest select 1,20,30 from generate_series(1,1000000)i;
insert into gstest select 2,30,40 from generate_series(1,1000000)i;
insert into gstest select 2,40,50 from generate_series(1,1000000)i;
insert into gstest select 3,50,60 from generate_series(1,1000000)i;
insert into gstest select 1,NULL,000000 from generate_series(1,1000000)i;
analyze gstest;
SET parallel_tuple_cost=0;
SET parallel_setup_cost=0;
SET max_parallel_workers_per_gather=4;
-- test for hashagg
set enable_hashagg to on;
explain (costs off, verbose)
select c1, c2, avg(c3) from gstest group by grouping sets((c1,c2),(c1));
                          QUERY PLAN                          
--------------------------------------------------------------
 Finalize GroupAggregate
   Output: c1, c2, avg(c3), (gset_id)
   Group Key: gstest.c1, gstest.c2, (gset_id)
   ->  Gather Merge
         Output: c1, c2, (gset_id), (PARTIAL avg(c3))
         Workers Planned: 4
         ->  Sort
               Output: c1, c2, (gset_id), (PARTIAL avg(c3))
               Sort Key: gstest.c1, gstest.c2, (gset_id)
               ->  Partial HashAggregate
                     Output: c1, c2, gset_id, PARTIAL avg(c3)
                     Hash Key: gstest.c1, gstest.c2
                     Hash Key: gstest.c1
                     ->  Parallel Seq Scan on public.gstest
                           Output: c1, c2, gset_id, c3
(15 rows)

select c1, c2, avg(c3) from gstest group by grouping sets((c1,c2),(c1)) order by 1,2,3;
 c1 | c2 |            avg             
----+----+----------------------------
  1 | 10 |       150.0000000000000000
  1 | 20 |        30.0000000000000000
  1 |    | 0.000000000000000000000000
  1 |    |        82.5000000000000000
  2 | 30 |        40.0000000000000000
  2 | 40 |        50.0000000000000000
  2 |    |        45.0000000000000000
  3 | 50 |        60.0000000000000000
  3 |    |        60.0000000000000000
(9 rows)

explain (costs off, verbose)
select c1, c2, c3, avg(c3) from gstest group by grouping sets((c1,c2),(c1), (c2,c3));
                             QUERY PLAN                             
--------------------------------------------------------------------
 Append
   ->  Finalize GroupAggregate
         Output: c1, c2, NULL::integer, avg(c3), (gset_id)
         Group Key: gstest.c1, gstest.c2, (gset_id)
         ->  Gather Merge
               Output: c1, c2, (gset_id), (PARTIAL avg(c3))
               Workers Planned: 4
               ->  Sort
                     Output: c1, c2, (gset_id), (PARTIAL avg(c3))
                     Sort Key: gstest.c1, gstest.c2, (gset_id)
                     ->  Partial HashAggregate
                           Output: c1, c2, gset_id, PARTIAL avg(c3)
                           Hash Key: gstest.c1, gstest.c2
                           Hash Key: gstest.c1
                           ->  Parallel Seq Scan on public.gstest
                                 Output: c1, c2, c3, gset_id
   ->  Finalize GroupAggregate
         Output: NULL::integer, c2, c3, avg(c3), (gset_id)
         Group Key: gstest.c2, gstest.c3, (gset_id)
         ->  Gather Merge
               Output: c2, c3, (gset_id), (PARTIAL avg(c3))
               Workers Planned: 4
               ->  Sort
                     Output: c2, c3, (gset_id), (PARTIAL avg(c3))
                     Sort Key: gstest.c2, gstest.c3, (gset_id)
                     ->  Partial HashAggregate
                           Output: c2, c3, gset_id, PARTIAL avg(c3)
                           Hash Key: gstest.c2, gstest.c3
                           ->  Parallel Seq Scan on public.gstest
                                 Output: c1, c2, c3, gset_id
(30 rows)

select c1, c2, c3, avg(c3) from gstest group by grouping sets((c1,c2),(c1), (c2,c3)) order by 1,2,3,4;
 c1 | c2 | c3  |            avg             
----+----+-----+----------------------------
  1 | 10 |     |       150.0000000000000000
  1 | 20 |     |        30.0000000000000000
  1 |    |     | 0.000000000000000000000000
  1 |    |     |        82.5000000000000000
  2 | 30 |     |        40.0000000000000000
  2 | 40 |     |        50.0000000000000000
  2 |    |     |        45.0000000000000000
  3 | 50 |     |        60.0000000000000000
  3 |    |     |        60.0000000000000000
    | 10 | 100 |       100.0000000000000000
    | 10 | 200 |       200.0000000000000000
    | 20 |  30 |        30.0000000000000000
    | 30 |  40 |        40.0000000000000000
    | 40 |  50 |        50.0000000000000000
    | 50 |  60 |        60.0000000000000000
    |    |   0 | 0.000000000000000000000000
(16 rows)

-- test for groupagg
set enable_hashagg to off;
explain (costs off, verbose)
select c1, c2, avg(c3) from gstest group by grouping sets((c1,c2),(c1));
                          QUERY PLAN                           
---------------------------------------------------------------
 Finalize GroupAggregate
   Output: c1, c2, avg(c3), (gset_id)
   Group Key: gstest.c1, gstest.c2, (gset_id)
   ->  Gather Merge
         Output: c1, c2, (gset_id), (PARTIAL avg(c3))
         Workers Planned: 4
         ->  Partial GroupAggregate
               Output: c1, c2, gset_id, PARTIAL avg(c3)
               Group Key: gstest.c1, gstest.c2
               Group Key: gstest.c1
               ->  Sort
                     Output: c1, c2, (gset_id), c3
                     Sort Key: gstest.c1, gstest.c2, (gset_id)
                     ->  Parallel Seq Scan on public.gstest
                           Output: c1, c2, gset_id, c3
(15 rows)

select c1, c2, avg(c3) from gstest group by grouping sets((c1,c2),(c1)) order by 1,2,3;
 c1 | c2 |            avg             
----+----+----------------------------
  1 | 10 |       150.0000000000000000
  1 | 20 |        30.0000000000000000
  1 |    | 0.000000000000000000000000
  1 |    |        82.5000000000000000
  2 | 30 |        40.0000000000000000
  2 | 40 |        50.0000000000000000
  2 |    |        45.0000000000000000
  3 | 50 |        60.0000000000000000
  3 |    |        60.0000000000000000
(9 rows)

explain (costs off, verbose)
select c1, c2, c3, avg(c3) from gstest group by grouping sets((c1,c2),(c1), (c2,c3));
                             QUERY PLAN                              
---------------------------------------------------------------------
 Append
   ->  Finalize GroupAggregate
         Output: c1, c2, NULL::integer, avg(c3), (gset_id)
         Group Key: gstest.c1, gstest.c2, (gset_id)
         ->  Gather Merge
               Output: c1, c2, (gset_id), (PARTIAL avg(c3))
               Workers Planned: 4
               ->  Partial GroupAggregate
                     Output: c1, c2, gset_id, PARTIAL avg(c3)
                     Group Key: gstest.c1, gstest.c2
                     Group Key: gstest.c1
                     ->  Sort
                           Output: c1, c2, c3, (gset_id)
                           Sort Key: gstest.c1, gstest.c2, (gset_id)
                           ->  Parallel Seq Scan on public.gstest
                                 Output: c1, c2, c3, gset_id
   ->  Finalize GroupAggregate
         Output: NULL::integer, c2, c3, avg(c3), (gset_id)
         Group Key: gstest.c2, gstest.c3, (gset_id)
         ->  Gather Merge
               Output: c2, c3, (gset_id), (PARTIAL avg(c3))
               Workers Planned: 4
               ->  Partial GroupAggregate
                     Output: c2, c3, gset_id, PARTIAL avg(c3)
                     Group Key: gstest.c2, gstest.c3
                     ->  Sort
                           Output: c1, c2, c3, (gset_id)
                           Sort Key: gstest.c2, gstest.c3, (gset_id)
                           ->  Parallel Seq Scan on public.gstest
                                 Output: c1, c2, c3, gset_id
(30 rows)

select c1, c2, c3, avg(c3) from gstest group by grouping sets((c1,c2),(c1), (c2,c3)) order by 1,2,3,4;
 c1 | c2 | c3  |            avg             
----+----+-----+----------------------------
  1 | 10 |     |       150.0000000000000000
  1 | 20 |     |        30.0000000000000000
  1 |    |     | 0.000000000000000000000000
  1 |    |     |        82.5000000000000000
  2 | 30 |     |        40.0000000000000000
  2 | 40 |     |        50.0000000000000000
  2 |    |     |        45.0000000000000000
  3 | 50 |     |        60.0000000000000000
  3 |    |     |        60.0000000000000000
    | 10 | 100 |       100.0000000000000000
    | 10 | 200 |       200.0000000000000000
    | 20 |  30 |        30.0000000000000000
    | 30 |  40 |        40.0000000000000000
    | 40 |  50 |        50.0000000000000000
    | 50 |  60 |        60.0000000000000000
    |    |   0 | 0.000000000000000000000000
(16 rows)

drop table gstest;
